document.addEventListener('DOMContentLoaded', onContentLoaded, false);

var archives = {};

function onContentLoaded(event) {
  var i;
  var il;
  var images = document.querySelectorAll('img[data-archive]');
  var image;
  var archive;
  var filename;

  for (i = 0, il = images.length; i < il; ++i) {
    image = images[i];
    archive = image.getAttribute('data-archive');
    filename = image.getAttribute('data-filename');

    if (!archive || !filename) {
      continue;
    }

    if (!archives[archive]) {
       requestArchive(archive, (function(image, archive, filename) {
         return function() {
           replaceImageElement(image, archive, filename);
         }
       })(image, archive, filename));
    } else {
      replaceImageElement(image, archive, filename);
    }
  }

  this.removeEventListener('DOMContentLoaded', onload, false);
}

function replaceImageElement(img, archive, filename) {
  img.src = createObjectURL(archives[archive].decompress(filename), 'image/svg+xml');
  img.setAttribute('title', filename);
  img.removeAttribute('data-archive');
  img.removeAttribute('data-filename');
}

function createObjectURL(array, type) {
  var g = window;
  var func;
  var bb;
  var blob;

  if (window.Uint8Array && array instanceof Array) {
    array = new Uint8Array(array);
  }

  // Blob constructor
  try {
    blob = new Blob([array], {type: type});
  } catch(e) {
  }

  // BlobBuilder
  if (
    (func = g.WebkitBlobBuilder) !== void 0 ||
    (func = g.MozBlobBuilder) !== void 0 ||
    (func = g.MSBlobBuilder) !== void 0
  ) {
    bb = new func();

    bb.append(array.buffer);
    blob = bb.getBlob(type);
  }

  // createObjectURL
  if (blob && (
    ((func = g.URL)       && func.createObjectURL) ||
    ((func = g.webkitURL) && func.createObjectURL)
  )) {
    return func.createObjectURL(blob);
  }

  // DataURL
  var i;
  var il;
  var data = '';
  for (i = 0, il = array.length; i < il;) {
    data += String.fromCharCode.apply(
      null,
      array instanceof Array ?
        array.slice(i, i += 0x7fff) :
        array.subarray(i, i+= 0x7fff)
    );
  }

  return 'data:' + type + ';base64,'+ window.btoa(data);
}

function requestArchive(archive, callback) {
  var xhr = new XMLHttpRequest();

  xhr.open('GET', archive, true);
  xhr.responseType = 'arraybuffer';
  xhr.overrideMimeType('text/plain; charset=x-user-defined');
  xhr.addEventListener('load', onload, false);
  xhr.addEventListener('error', onerror, false);
  xhr.send();

  function onload() {
    var zip;
    var buffer;

    if (xhr.readyState === 4 && xhr.status === 200) {
      // arraybuffer
      buffer = this.response ?
        new Uint8Array(this.response) :
        str2array(xhr.responseText);
      zip = new Zlib.Unzip(buffer);
      archives[archive] = zip;
      this.removeEventListener('load', onload, false);
      callback();
    } else {
      onerror.apply(this, arguments);
    }
  }
  function onerror() {
    console.error('archive download error:' + archive);
    this.removeEventListener('error', onerror, false);
  }
  function str2array(str) {
    var i;
    var il = str.length;
    var array =
      new (typeof Uint8Array !== 'undefined' ? Uint8Array : Array)(il);

    for (i = 0; i < il; ++i) {
      array[i] = str.charCodeAt(i) & 0xff;
    }

    return array;
  }
}